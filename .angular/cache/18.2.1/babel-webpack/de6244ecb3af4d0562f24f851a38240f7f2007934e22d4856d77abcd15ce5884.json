{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { Renderer2, Input, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport QRCode from 'qrcode';\nvar NgxQrcodeElementTypes = /*#__PURE__*/function (NgxQrcodeElementTypes) {\n  NgxQrcodeElementTypes[\"URL\"] = \"url\";\n  NgxQrcodeElementTypes[\"IMG\"] = \"img\";\n  NgxQrcodeElementTypes[\"CANVAS\"] = \"canvas\";\n  return NgxQrcodeElementTypes;\n}(NgxQrcodeElementTypes || {});\nvar NgxQrcodeErrorCorrectionLevels = /*#__PURE__*/function (NgxQrcodeErrorCorrectionLevels) {\n  NgxQrcodeErrorCorrectionLevels[\"LOW\"] = \"L\";\n  NgxQrcodeErrorCorrectionLevels[\"MEDIUM\"] = \"M\";\n  NgxQrcodeErrorCorrectionLevels[\"QUARTILE\"] = \"Q\";\n  NgxQrcodeErrorCorrectionLevels[\"HIGH\"] = \"H\";\n  return NgxQrcodeErrorCorrectionLevels;\n}(NgxQrcodeErrorCorrectionLevels || {});\nconst DEFAULT_VALUES = {\n  elementType: NgxQrcodeElementTypes.URL,\n  cssClass: 'qrcode',\n  value: 'https://www.techiediaries.com',\n  version: '',\n  errorCorrectionLevel: NgxQrcodeErrorCorrectionLevels.MEDIUM,\n  margin: 4,\n  scale: 4,\n  width: 10,\n  colorDark: '#000',\n  colorLight: '#FFF'\n};\nlet QrcodeComponent = /*#__PURE__*/(() => {\n  let QrcodeComponent = class QrcodeComponent {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this.elementType = DEFAULT_VALUES.elementType;\n      this.cssClass = DEFAULT_VALUES.cssClass;\n      this.value = DEFAULT_VALUES.value;\n      this.version = DEFAULT_VALUES.version;\n      this.errorCorrectionLevel = DEFAULT_VALUES.errorCorrectionLevel;\n      this.margin = DEFAULT_VALUES.margin;\n      this.scale = DEFAULT_VALUES.scale;\n      this.width = DEFAULT_VALUES.width;\n      this.colorDark = DEFAULT_VALUES.colorDark;\n      this.colorLight = DEFAULT_VALUES.colorLight;\n    }\n    ngOnChanges() {\n      this.createQRCode();\n    }\n    createQRCode() {\n      if (!this.value) {\n        return;\n      }\n      let element;\n      switch (this.elementType) {\n        case NgxQrcodeElementTypes.CANVAS:\n          element = this.renderer.createElement('canvas');\n          this.toCanvas(element).then(() => {\n            this.renderElement(element);\n          }).catch(e => {\n            this.removeElementChildren();\n            console.error(e);\n          });\n          break;\n        default:\n          element = this.renderer.createElement('img');\n          this.toDataURL().then(src => {\n            element.setAttribute('src', src);\n            if (this.alt) {\n              element.setAttribute('alt', this.alt);\n            }\n            this.renderElement(element);\n          }).catch(e => {\n            this.removeElementChildren();\n            console.error(e);\n          });\n      }\n    }\n    toDataURL() {\n      return QRCode.toDataURL(this.value, {\n        version: this.version,\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        width: this.width,\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        }\n      });\n    }\n    toCanvas(canvas) {\n      return QRCode.toCanvas(canvas, this.value, {\n        version: this.version,\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        width: this.width,\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        }\n      });\n    }\n    renderElement(element) {\n      this.removeElementChildren();\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    removeElementChildren() {\n      for (const node of this.qrcElement.nativeElement.childNodes) {\n        this.renderer.removeChild(this.qrcElement.nativeElement, node);\n      }\n    }\n  };\n  __decorate([Input()], QrcodeComponent.prototype, \"elementType\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"cssClass\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"alt\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"value\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"version\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"errorCorrectionLevel\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"margin\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"scale\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"width\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"colorDark\", void 0);\n  __decorate([Input()], QrcodeComponent.prototype, \"colorLight\", void 0);\n  __decorate([ViewChild('qrcElement')], QrcodeComponent.prototype, \"qrcElement\", void 0);\n  QrcodeComponent = __decorate([Component({\n    selector: 'ngx-qrcode',\n    template: `\n    <div #qrcElement [class]=\"cssClass\"></div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })], QrcodeComponent);\n  return QrcodeComponent;\n})();\nlet NgxQRCodeModule = /*#__PURE__*/(() => {\n  let NgxQRCodeModule = class NgxQRCodeModule {};\n  NgxQRCodeModule = __decorate([NgModule({\n    declarations: [QrcodeComponent],\n    exports: [QrcodeComponent]\n  })], NgxQRCodeModule);\n\n  /*\n   * Public API Surface of ngx-qrcode\n   */\n\n  /**\n   * Generated bundle index. Do not edit.\n   */\n  return NgxQRCodeModule;\n})();\nexport { NgxQRCodeModule, NgxQrcodeElementTypes, NgxQrcodeErrorCorrectionLevels, QrcodeComponent };\n//# sourceMappingURL=ngx-qrcode2.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}